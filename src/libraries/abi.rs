use cosmwasm_std::Uint128;
use ethabi::{decode as EthDecode, ParamType, Token};
use hex::decode;

use crate::libraries::tm_signature;
use crate::libraries::multi_store;
use crate::libraries::block_header_merkle_path;
use crate::libraries::iavl_merkle_path;
use crate::libraries::result_codec::{Result, ResolveStatus};

#[derive(Debug)]
pub struct RelayBlockParams {
    multi_store: multi_store::Data,
    merkle_paths: block_header_merkle_path::Data,
    signatures: Vec<tm_signature::Data>
}

#[derive(Debug)]
pub struct VerifyDataParams {
    block_height: Uint128,
    result: Result,
    version: Uint128,
    merkle_paths: Vec<iavl_merkle_path::Data>
}

#[derive(Debug)]
pub struct VerifyCountParams {
    block_height: Uint128,
    count: u64,
    version: Uint128,
    merkle_paths: Vec<iavl_merkle_path::Data>
}

pub enum AbiTypes {
    RelayTypes,
    VerifyTypes,
    VerifyCountTypes,
    RelayAndVerifyTypes,
}

pub fn get_abi_types(msg: AbiTypes) -> Vec<ParamType> {
    return match msg {
        AbiTypes::RelayTypes => vec![
            ParamType::Tuple(vec![
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
            ]),
            ParamType::Tuple(vec![
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(32)),
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
                Box::new(ParamType::FixedBytes(32)),
            ]),
            ParamType::Array(
                Box::new(ParamType::Tuple(vec![
                    Box::new(ParamType::FixedBytes(32)),
                    Box::new(ParamType::FixedBytes(32)),
                    Box::new(ParamType::Uint(8)),
                    Box::new(ParamType::Bytes),
                    Box::new(ParamType::Bytes),
                ]))
            )
        ],
        AbiTypes::VerifyTypes => vec![
            ParamType::Uint(256),
            ParamType::Tuple(vec![
                Box::new(ParamType::String),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Bytes),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(64)),
                Box::new(ParamType::Uint(8)),
                Box::new(ParamType::Bytes),
            ]),
            ParamType::Uint(256),
            ParamType::Array(
                Box::new(ParamType::Tuple(vec![
                    Box::new(ParamType::Bool),
                    Box::new(ParamType::Uint(8)),
                    Box::new(ParamType::Uint(256)),
                    Box::new(ParamType::Uint(256)),
                    Box::new(ParamType::FixedBytes(32)),
                ]))
            )
        ],
        AbiTypes::VerifyCountTypes => vec![
            ParamType::Uint(256),
            ParamType::Uint(256),
            ParamType::Uint(256),
            ParamType::Array(
                Box::new(ParamType::Tuple(vec![
                    Box::new(ParamType::Bool),
                    Box::new(ParamType::Uint(8)),
                    Box::new(ParamType::Uint(256)),
                    Box::new(ParamType::Uint(256)),
                    Box::new(ParamType::FixedBytes(32)),
                ]))
            ),
        ],
        AbiTypes::RelayAndVerifyTypes => vec![
            ParamType::Bytes,
            ParamType::Bytes,
        ],
    }
}

pub fn eth_decode(types: AbiTypes, msg: String) -> Vec<Token> {
    let decoded = EthDecode(get_abi_types(types).as_slice(), decode(msg).unwrap().as_slice());
    decoded.unwrap()
}

pub fn eth_decode_relay_data(data: &Token) -> RelayBlockParams {
    return match eth_decode(AbiTypes::RelayTypes, data.to_string()).as_slice() {
        [Token::Tuple(relay_multi_store), Token::Tuple(relay_merkle_paths), Token::Array(relay_signatures)] => {
            let decoded_multi_store = match relay_multi_store.as_slice() {
                [Token::FixedBytes(mult1), Token::FixedBytes(mult2), Token::FixedBytes(mult3), Token::FixedBytes(mult4), Token::FixedBytes(mult5)] => multi_store::Data {
                    auth_to_ibc_transfer_stores_merkle_hash: mult1.to_vec(),
                    mint_store_merkle_hash: mult2.to_vec(),
                    oracle_iavl_state_hash: mult3.to_vec(),
                    params_to_slash_stores_merkle_hash: mult4.to_vec(),
                    staking_to_upgrade_stores_merkle_hash: mult5.to_vec(),
                },
                _ => panic!("Invalid multi store data"),
            };
            let decoded_merkle_paths = match relay_merkle_paths.as_slice() {
                [Token::FixedBytes(merk1), Token::Uint(merk2), Token::Uint(merk3), Token::Uint(merk4), Token::FixedBytes(merk5), Token::FixedBytes(merk6), Token::FixedBytes(merk7), Token::FixedBytes(merk8)] => block_header_merkle_path::Data {
                    version_and_chain_id_hash: merk1.to_vec(),
                    height: merk2.as_u64(),
                    time_second: merk3.as_u64(),
                    time_nano_second: merk4.as_u32(),
                    last_block_id_and_other: merk5.to_vec(),
                    next_validator_hash_and_consensus_hash: merk6.to_vec(),
                    last_results_hash: merk7.to_vec(),
                    evidence_and_proposer_hash: merk8.to_vec(),
                },
                _ => panic!("Invalid merkle paths"),
            };
            let mut decoded_signatures: Vec<tm_signature::Data> = Vec::new();
            for data_tuple in relay_signatures.as_slice() {
                let data = match data_tuple {
                    Token::Tuple(arr) => arr,
                    _ => panic!("Invalid signatures"),
                };
                let signature_item = match data.as_slice() {
                    [Token::FixedBytes(sign1), Token::FixedBytes(sign2), Token::Uint(sign3), Token::Bytes(sign4), Token::Bytes(sign5)] => tm_signature::Data {
                        r: sign1.to_vec(),
                        s: sign2.to_vec(),
                        v: sign3.byte(0),
                        signed_data_prefix: sign4.to_vec(),
                        signed_data_suffix: sign5.to_vec(),
                    },
                    _ => panic!("Invalid signatures"),
                };
                decoded_signatures.push(signature_item);
            }

            RelayBlockParams {
                multi_store: decoded_multi_store,
                merkle_paths: decoded_merkle_paths,
                signatures: decoded_signatures,
            }
        },
        _ => panic!("Invalid relay block data"),
    };
}

pub fn eth_decode_verify_data(data: &Token) -> VerifyDataParams {
    return match eth_decode(AbiTypes::VerifyTypes, data.to_string()).as_slice() {
        [Token::Uint(verify_block_height), Token::Tuple(verify_result), Token::Uint(verify_version), Token::Array(verify_merkle_paths)] => {
            let decoded_block_height = Uint128::from(verify_block_height.as_u128());
            let decoded_result = match verify_result.as_slice() {
                [Token::String(res1), Token::Uint(res2), Token::Bytes(res3), Token::Uint(res4), Token::Uint(res5), Token::Uint(res6), Token::Uint(res7), Token::Uint(res8), Token::Uint(res9), Token::Uint(res10), Token::Bytes(res11)] => Result {
                    client_id: res1.to_string(),
                    oracle_script_id: res2.as_u64(),
                    params: res3.to_vec(),
                    ask_count: res4.as_u64(),
                    min_count: res5.as_u64(),
                    request_id: res6.as_u64(),
                    ans_count: res7.as_u64(),
                    request_time: res8.as_u64(),
                    resolve_time: res9.as_u64(),
                    resolve_status: ResolveStatus::from_u64(res10.as_u64()),
                    result: res11.to_vec(),
                },
                _ => panic!("Invalid verify result")
            };
            let decoded_version = Uint128::from(verify_version.as_u128());
            let mut decoded_merkle_paths: Vec<iavl_merkle_path::Data> = Vec::new();
            for data_tuple in verify_merkle_paths.as_slice() {
                let data = match data_tuple {
                    Token::Tuple(arr) => arr,
                    _ => panic!("Invalid merkle paths"),
                };
                let merkle_paths_item = match data.as_slice() {
                    [Token::Bool(mer1), Token::Uint(mer2), Token::Uint(mer3), Token::Uint(mer4), Token::FixedBytes(mer5)] => iavl_merkle_path::Data {
                        is_data_on_right: mer1.clone(),
                        sub_tree_height: mer2.byte(0),
                        sub_tree_size: Uint128::from(mer3.as_u128()),
                        sub_tree_version: Uint128::from(mer4.as_u128()),
                        sibling_hash: mer5.to_vec(),
                    },
                    _ => panic!("Invalid merkle paths"),
                };
                decoded_merkle_paths.push(merkle_paths_item);
            }

            VerifyDataParams {
                block_height: decoded_block_height,
                result: decoded_result,
                version: decoded_version,
                merkle_paths: decoded_merkle_paths,
            }
        },
        _ => panic!("Invalid verify oracle data"),
    };
}

pub fn eth_decode_verify_count(data: &Token) -> VerifyCountParams {
    return match eth_decode(AbiTypes::VerifyCountTypes, data.to_string()).as_slice() {
        [Token::Uint(verify_block_height), Token::Uint(verify_count), Token::Uint(verify_version), Token::Array(verify_merkle_paths)] => {
            let decoded_block_height = Uint128::from(verify_block_height.as_u128());
            let decoded_count = verify_count.as_u64();
            let decoded_version = Uint128::from(verify_version.as_u128());
            let mut decoded_merkle_paths: Vec<iavl_merkle_path::Data> = Vec::new();
            for data_tuple in verify_merkle_paths.as_slice() {
                let data = match data_tuple {
                    Token::Tuple(arr) => arr,
                    _ => panic!("Invalid merkle paths"),
                };
                let merkle_paths_item = match data.as_slice() {
                    [Token::Bool(mer1), Token::Uint(mer2), Token::Uint(mer3), Token::Uint(mer4), Token::FixedBytes(mer5)] => iavl_merkle_path::Data {
                        is_data_on_right: mer1.clone(),
                        sub_tree_height: mer2.byte(0),
                        sub_tree_size: Uint128::from(mer3.as_u128()),
                        sub_tree_version: Uint128::from(mer4.as_u128()),
                        sibling_hash: mer5.to_vec(),
                    },
                    _ => panic!("Invalid merkle paths"),
                };
                decoded_merkle_paths.push(merkle_paths_item);
            }

            VerifyCountParams {
                block_height: decoded_block_height,
                count: decoded_count,
                version: decoded_version,
                merkle_paths: decoded_merkle_paths,
            }
        },
        _ => panic!("Invalid verify requests count data"),
    };
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn eth_decode_relayandverify_test() {
        let calldata = String::from
        if let [relay_data, verify_data] = eth_decode(AbiTypes::RelayAndVerifyTypes, calldata).as_slice() {
            let decoded_relay_data = eth_decode_relay_data(relay_data);
            let decoded_verify_data = eth_decode_verify_data(verify_data);
            println!("RELAY: {:?}", decoded_relay_data);
            println!("VERIFY: {:?}", decoded_verify_data);
        }
    }

    #[test]
    fn eth_decode_relayandverifycount_test() {
        let calldata = String::from
        if let [relay_data, verify_count_data] = eth_decode(AbiTypes::RelayAndVerifyTypes, calldata).as_slice() {
            let decoded_relay_data = eth_decode_relay_data(relay_data);
            let decoded_verify_count_data = eth_decode_verify_count(verify_count_data);
            println!("RELAY: {:?}", decoded_relay_data);
            println!("VERIFY COUNT: {:?}", decoded_verify_count_data);
        }
    }
}
